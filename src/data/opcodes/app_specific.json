[
  {
    "name": "ACCEPT",
    "alias_of": "",
    "tlb": "#F800",
    "doc_category": "app_gas",
    "doc_opcode": "F800",
    "doc_fift": "ACCEPT",
    "doc_stack": "-",
    "doc_gas": 26,
    "doc_description": "Sets current gas limit `g_l` to its maximal allowed value `g_m`, and resets the gas credit `g_c` to zero, decreasing the value of `g_r` by `g_c` in the process.\nIn other words, the current smart contract agrees to buy some gas to finish the current transaction. This action is required to process external messages, which bring no value (hence no gas) with themselves."
  },
  {
    "name": "SETGASLIMIT",
    "alias_of": "",
    "tlb": "#F801",
    "doc_category": "app_gas",
    "doc_opcode": "F801",
    "doc_fift": "SETGASLIMIT",
    "doc_stack": "g -",
    "doc_gas": 26,
    "doc_description": "Sets current gas limit `g_l` to the minimum of `g` and `g_m`, and resets the gas credit `g_c` to zero. If the gas consumed so far (including the present instruction) exceeds the resulting value of `g_l`, an (unhandled) out of gas exception is thrown before setting new gas limits. Notice that `SETGASLIMIT` with an argument `g >= 2^63-1` is equivalent to `ACCEPT`."
  },
  {
    "name": "COMMIT",
    "alias_of": "",
    "tlb": "#F80F",
    "doc_category": "app_gas",
    "doc_opcode": "F80F",
    "doc_fift": "COMMIT",
    "doc_stack": "-",
    "doc_gas": 26,
    "doc_description": "Commits the current state of registers `c4` (“persistent data'') and `c5` (“actions'') so that the current execution is considered “successful'' with the saved values even if an exception is thrown later."
  },
  {
    "name": "RANDU256",
    "alias_of": "",
    "tlb": "#F810",
    "doc_category": "app_rnd",
    "doc_opcode": "F810",
    "doc_fift": "RANDU256",
    "doc_stack": "- x",
    "doc_gas": "26+|c7|+|c1_1|",
    "doc_description": "Generates a new pseudo-random unsigned 256-bit _Integer_ `x`. The algorithm is as follows: if `r` is the old value of the random seed, considered as a 32-byte array (by constructing the big-endian representation of an unsigned 256-bit integer), then its `sha512(r)` is computed; the first 32 bytes of this hash are stored as the new value `r'` of the random seed, and the remaining 32 bytes are returned as the next random value `x`."
  },
  {
    "name": "RAND",
    "alias_of": "",
    "tlb": "#F811",
    "doc_category": "app_rnd",
    "doc_opcode": "F811",
    "doc_fift": "RAND",
    "doc_stack": "y - z",
    "doc_gas": "26+|c7|+|c1_1|",
    "doc_description": "Generates a new pseudo-random integer `z` in the range `0...y-1` (or `y...-1`, if `y<0`). More precisely, an unsigned random value `x` is generated as in `RAND256U`; then `z:=floor(x*y/2^256)` is computed.\nEquivalent to `RANDU256` `256 MULRSHIFT`."
  },
  {
    "name": "SETRAND",
    "alias_of": "",
    "tlb": "#F814",
    "doc_category": "app_rnd",
    "doc_opcode": "F814",
    "doc_fift": "SETRAND",
    "doc_stack": "x -",
    "doc_gas": "26+|c7|+|c1_1|",
    "doc_description": "Sets the random seed to unsigned 256-bit _Integer_ `x`."
  },
  {
    "name": "ADDRAND",
    "alias_of": "",
    "tlb": "#F815",
    "doc_category": "app_rnd",
    "doc_opcode": "F815",
    "doc_fift": "ADDRAND\nRANDOMIZE",
    "doc_stack": "x -",
    "doc_gas": 26,
    "doc_description": "Mixes unsigned 256-bit _Integer_ `x` into the random seed `r` by setting the random seed to `Sha` of the concatenation of two 32-byte strings: the first with the big-endian representation of the old seed `r`, and the second with the big-endian representation of `x`."
  },
  {
    "name": "GETPARAM",
    "alias_of": "",
    "tlb": "#F82 i:uint4",
    "doc_category": "app_config",
    "doc_opcode": "F82i",
    "doc_fift": "[i] GETPARAM",
    "doc_stack": "- x",
    "doc_gas": 26,
    "doc_description": "Returns the `i`-th parameter from the _Tuple_ provided at `c7` for `0 <= i <= 15`. Equivalent to `c7 PUSHCTR` `FIRST` `[i] INDEX`.\nIf one of these internal operations fails, throws an appropriate type checking or range checking exception."
  },
  {
    "name": "NOW",
    "alias_of": "GETPARAM",
    "tlb": "#F823",
    "doc_category": "app_config",
    "doc_opcode": "F823",
    "doc_fift": "NOW",
    "doc_stack": "- x",
    "doc_gas": 26,
    "doc_description": "Returns the current Unix time as an _Integer_. If it is impossible to recover the requested value starting from `c7`, throws a type checking or range checking exception as appropriate.\nEquivalent to `3 GETPARAM`."
  },
  {
    "name": "BLOCKLT",
    "alias_of": "GETPARAM",
    "tlb": "#F824",
    "doc_category": "app_config",
    "doc_opcode": "F824",
    "doc_fift": "BLOCKLT",
    "doc_stack": "- x",
    "doc_gas": 26,
    "doc_description": "Returns the starting logical time of the current block.\nEquivalent to `4 GETPARAM`."
  },
  {
    "name": "LTIME",
    "alias_of": "GETPARAM",
    "tlb": "#F825",
    "doc_category": "app_config",
    "doc_opcode": "F825",
    "doc_fift": "LTIME",
    "doc_stack": "- x",
    "doc_gas": 26,
    "doc_description": "Returns the logical time of the current transaction.\nEquivalent to `5 GETPARAM`."
  },
  {
    "name": "RANDSEED",
    "alias_of": "GETPARAM",
    "tlb": "#F826",
    "doc_category": "app_config",
    "doc_opcode": "F826",
    "doc_fift": "RANDSEED",
    "doc_stack": "- x",
    "doc_gas": 26,
    "doc_description": "Returns the current random seed as an unsigned 256-bit _Integer_.\nEquivalent to `6 GETPARAM`."
  },
  {
    "name": "BALANCE",
    "alias_of": "GETPARAM",
    "tlb": "#F827",
    "doc_category": "app_config",
    "doc_opcode": "F827",
    "doc_fift": "BALANCE",
    "doc_stack": "- t",
    "doc_gas": 26,
    "doc_description": "Returns the remaining balance of the smart contract as a _Tuple_ consisting of an _Integer_ (the remaining Gram balance in nanograms) and a _Maybe Cell_ (a dictionary with 32-bit keys representing the balance of “extra currencies'').\nEquivalent to `7 GETPARAM`.\nNote that `RAW` primitives such as `SENDRAWMSG` do not update this field."
  },
  {
    "name": "MYADDR",
    "alias_of": "GETPARAM",
    "tlb": "#F828",
    "doc_category": "app_config",
    "doc_opcode": "F828",
    "doc_fift": "MYADDR",
    "doc_stack": "- s",
    "doc_gas": 26,
    "doc_description": "Returns the internal address of the current smart contract as a _Slice_ with a `MsgAddressInt`. If necessary, it can be parsed further using primitives such as `PARSEMSGADDR` or `REWRITESTDADDR`.\nEquivalent to `8 GETPARAM`."
  },
  {
    "name": "CONFIGROOT",
    "alias_of": "GETPARAM",
    "tlb": "#F829",
    "doc_category": "app_config",
    "doc_opcode": "F829",
    "doc_fift": "CONFIGROOT",
    "doc_stack": "- D",
    "doc_gas": 26,
    "doc_description": "Returns the _Maybe Cell_ `D` with the current global configuration dictionary. Equivalent to `9 GETPARAM `."
  },
  {
    "name": "CONFIGDICT",
    "alias_of": "",
    "tlb": "#F830",
    "doc_category": "app_config",
    "doc_opcode": "F830",
    "doc_fift": "CONFIGDICT",
    "doc_stack": "- D 32",
    "doc_gas": 26,
    "doc_description": "Returns the global configuration dictionary along with its key length (32).\nEquivalent to `CONFIGROOT` `32 PUSHINT`."
  },
  {
    "name": "CONFIGPARAM",
    "alias_of": "",
    "tlb": "#F832",
    "doc_category": "app_config",
    "doc_opcode": "F832",
    "doc_fift": "CONFIGPARAM",
    "doc_stack": "i - c -1 or 0",
    "doc_gas": "",
    "doc_description": "Returns the value of the global configuration parameter with integer index `i` as a _Cell_ `c`, and a flag to indicate success.\nEquivalent to `CONFIGDICT` `DICTIGETREF`."
  },
  {
    "name": "CONFIGOPTPARAM",
    "alias_of": "",
    "tlb": "#F833",
    "doc_category": "app_config",
    "doc_opcode": "F833",
    "doc_fift": "CONFIGOPTPARAM",
    "doc_stack": "i - c^?",
    "doc_gas": "",
    "doc_description": "Returns the value of the global configuration parameter with integer index `i` as a _Maybe Cell_ `c^?`.\nEquivalent to `CONFIGDICT` `DICTIGETOPTREF`."
  },
  {
    "name": "GETGLOBVAR",
    "alias_of": "",
    "tlb": "#F840",
    "doc_category": "app_global",
    "doc_opcode": "F840",
    "doc_fift": "GETGLOBVAR",
    "doc_stack": "k - x",
    "doc_gas": 26,
    "doc_description": "Returns the `k`-th global variable for `0 <= k < 255`.\nEquivalent to `c7 PUSHCTR` `SWAP` `INDEXVARQ`."
  },
  {
    "name": "GETGLOB",
    "alias_of": "",
    "tlb": "#F85_ k:(## 5) {1 <= k}",
    "doc_category": "app_global",
    "doc_opcode": "F85_k",
    "doc_fift": "[k] GETGLOB",
    "doc_stack": "- x",
    "doc_gas": 26,
    "doc_description": "Returns the `k`-th global variable for `1 <= k <= 31`.\nEquivalent to `c7 PUSHCTR` `[k] INDEXQ`."
  },
  {
    "name": "SETGLOBVAR",
    "alias_of": "",
    "tlb": "#F860",
    "doc_category": "app_global",
    "doc_opcode": "F860",
    "doc_fift": "SETGLOBVAR",
    "doc_stack": "x k -",
    "doc_gas": "26+|c7’|",
    "doc_description": "Assigns `x` to the `k`-th global variable for `0 <= k < 255`.\nEquivalent to `c7 PUSHCTR` `ROTREV` `SETINDEXVARQ` `c7 POPCTR`."
  },
  {
    "name": "SETGLOB",
    "alias_of": "",
    "tlb": "#F87_ k:(## 5) {1 <= k}",
    "doc_category": "app_global",
    "doc_opcode": "F87_k",
    "doc_fift": "[k] SETGLOB",
    "doc_stack": "x -",
    "doc_gas": "26+|c7’|",
    "doc_description": "Assigns `x` to the `k`-th global variable for `1 <= k <= 31`.\nEquivalent to `c7 PUSHCTR` `SWAP` `k SETINDEXQ` `c7 POPCTR`."
  },
  {
    "name": "HASHCU",
    "alias_of": "",
    "tlb": "#F900",
    "doc_category": "app_crypto",
    "doc_opcode": "F900",
    "doc_fift": "HASHCU",
    "doc_stack": "c - x",
    "doc_gas": 26,
    "doc_description": "Computes the representation hash of a _Cell_ `c` and returns it as a 256-bit unsigned integer `x`. Useful for signing and checking signatures of arbitrary entities represented by a tree of cells."
  },
  {
    "name": "HASHSU",
    "alias_of": "",
    "tlb": "#F901",
    "doc_category": "app_crypto",
    "doc_opcode": "F901",
    "doc_fift": "HASHSU",
    "doc_stack": "s - x",
    "doc_gas": 526,
    "doc_description": "Computes the hash of a _Slice_ `s` and returns it as a 256-bit unsigned integer `x`. The result is the same as if an ordinary cell containing only data and references from `s` had been created and its hash computed by `HASHCU`."
  },
  {
    "name": "SHA256U",
    "alias_of": "",
    "tlb": "#F902",
    "doc_category": "app_crypto",
    "doc_opcode": "F902",
    "doc_fift": "SHA256U",
    "doc_stack": "s - x",
    "doc_gas": 26,
    "doc_description": "Computes `Sha` of the data bits of _Slice_ `s`. If the bit length of `s` is not divisible by eight, throws a cell underflow exception. The hash value is returned as a 256-bit unsigned integer `x`."
  },
  {
    "name": "CHKSIGNU",
    "alias_of": "",
    "tlb": "#F910",
    "doc_category": "app_crypto",
    "doc_opcode": "F910",
    "doc_fift": "CHKSIGNU",
    "doc_stack": "h s k - ?",
    "doc_gas": 26,
    "doc_description": "Checks the Ed25519-signature `s` of a hash `h` (a 256-bit unsigned integer, usually computed as the hash of some data) using public key `k` (also represented by a 256-bit unsigned integer).\nThe signature `s` must be a _Slice_ containing at least 512 data bits; only the first 512 bits are used. The result is `-1` if the signature is valid, `0` otherwise.\nNotice that `CHKSIGNU` is equivalent to `ROT` `NEWC` `256 STU` `ENDC` `ROTREV` `CHKSIGNS`, i.e., to `CHKSIGNS` with the first argument `d` set to 256-bit _Slice_ containing `h`. Therefore, if `h` is computed as the hash of some data, these data are hashed _twice_, the second hashing occurring inside `CHKSIGNS`."
  },
  {
    "name": "CHKSIGNS",
    "alias_of": "",
    "tlb": "#F911",
    "doc_category": "app_crypto",
    "doc_opcode": "F911",
    "doc_fift": "CHKSIGNS",
    "doc_stack": "d s k - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether `s` is a valid Ed25519-signature of the data portion of _Slice_ `d` using public key `k`, similarly to `CHKSIGNU`. If the bit length of _Slice_ `d` is not divisible by eight, throws a cell underflow exception. The verification of Ed25519 signatures is the standard one, with `Sha` used to reduce `d` to the 256-bit number that is actually signed."
  },
  {
    "name": "CDATASIZEQ",
    "alias_of": "",
    "tlb": "#F940",
    "doc_category": "app_misc",
    "doc_opcode": "F940",
    "doc_fift": "CDATASIZEQ",
    "doc_stack": "c n - x y z -1 or 0",
    "doc_gas": "",
    "doc_description": "Recursively computes the count of distinct cells `x`, data bits `y`, and cell references `z` in the dag rooted at _Cell_ `c`, effectively returning the total storage used by this dag taking into account the identification of equal cells. The values of `x`, `y`, and `z` are computed by a depth-first traversal of this dag, with a hash table of visited cell hashes used to prevent visits of already-visited cells. The total count of visited cells `x` cannot exceed non-negative _Integer_ `n`; otherwise the computation is aborted before visiting the `(n+1)`-st cell and a zero is returned to indicate failure. If `c` is _Null_, returns `x=y=z=0`."
  },
  {
    "name": "CDATASIZE",
    "alias_of": "",
    "tlb": "#F941",
    "doc_category": "app_misc",
    "doc_opcode": "F941",
    "doc_fift": "CDATASIZE",
    "doc_stack": "c n - x y z",
    "doc_gas": "",
    "doc_description": "A non-quiet version of `CDATASIZEQ` that throws a cell overflow exception (8) on failure."
  },
  {
    "name": "SDATASIZEQ",
    "alias_of": "",
    "tlb": "#F942",
    "doc_category": "app_misc",
    "doc_opcode": "F942",
    "doc_fift": "SDATASIZEQ",
    "doc_stack": "s n - x y z -1 or 0",
    "doc_gas": "",
    "doc_description": "Similar to `CDATASIZEQ`, but accepting a _Slice_ `s` instead of a _Cell_. The returned value of `x` does not take into account the cell that contains the slice `s` itself; however, the data bits and the cell references of `s` are accounted for in `y` and `z`."
  },
  {
    "name": "SDATASIZE",
    "alias_of": "",
    "tlb": "#F943",
    "doc_category": "app_misc",
    "doc_opcode": "F943",
    "doc_fift": "SDATASIZE",
    "doc_stack": "s n - x y z",
    "doc_gas": "",
    "doc_description": "A non-quiet version of `SDATASIZEQ` that throws a cell overflow exception (8) on failure."
  },
  {
    "name": "LDGRAMS",
    "alias_of": "",
    "tlb": "#FA00",
    "doc_category": "app_currency",
    "doc_opcode": "FA00",
    "doc_fift": "LDGRAMS\nLDVARUINT16",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads (deserializes) a `Gram` or `VarUInteger 16` amount from _Slice_ `s`, and returns the amount as _Integer_ `x` along with the remainder `s'` of `s`. The expected serialization of `x` consists of a 4-bit unsigned big-endian integer `l`, followed by an `8l`-bit unsigned big-endian representation of `x`.\nThe net effect is approximately equivalent to `4 LDU` `SWAP` `3 LSHIFT#` `LDUX`."
  },
  {
    "name": "LDVARINT16",
    "alias_of": "",
    "tlb": "#FA01",
    "doc_category": "app_currency",
    "doc_opcode": "FA01",
    "doc_fift": "LDVARINT16",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Similar to `LDVARUINT16`, but loads a _signed_ _Integer_ `x`.\nApproximately equivalent to `4 LDU` `SWAP` `3 LSHIFT#` `LDIX`."
  },
  {
    "name": "STGRAMS",
    "alias_of": "",
    "tlb": "#FA02",
    "doc_category": "app_currency",
    "doc_opcode": "FA02",
    "doc_fift": "STGRAMS\nSTVARUINT16",
    "doc_stack": "b x - b'",
    "doc_gas": 26,
    "doc_description": "Stores (serializes) an _Integer_ `x` in the range `0...2^120-1` into _Builder_ `b`, and returns the resulting _Builder_ `b'`. The serialization of `x` consists of a 4-bit unsigned big-endian integer `l`, which is the smallest integer `l>=0`, such that `x<2^(8l)`, followed by an `8l`-bit unsigned big-endian representation of `x`. If `x` does not belong to the supported range, a range check exception is thrown."
  },
  {
    "name": "STVARINT16",
    "alias_of": "",
    "tlb": "#FA03",
    "doc_category": "app_currency",
    "doc_opcode": "FA03",
    "doc_fift": "STVARINT16",
    "doc_stack": "b x - b'",
    "doc_gas": 26,
    "doc_description": "Similar to `STVARUINT16`, but serializes a _signed_ _Integer_ `x` in the range `-2^119...2^119-1`."
  },
  {
    "name": "LDMSGADDR",
    "alias_of": "",
    "tlb": "#FA40",
    "doc_category": "app_addr",
    "doc_opcode": "FA40",
    "doc_fift": "LDMSGADDR",
    "doc_stack": "s - s' s''",
    "doc_gas": 26,
    "doc_description": "Loads from _Slice_ `s` the only prefix that is a valid `MsgAddress`, and returns both this prefix `s'` and the remainder `s''` of `s` as slices."
  },
  {
    "name": "LDMSGADDRQ",
    "alias_of": "",
    "tlb": "#FA41",
    "doc_category": "app_addr",
    "doc_opcode": "FA41",
    "doc_fift": "LDMSGADDRQ",
    "doc_stack": "s - s' s'' -1 or s 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of `LDMSGADDR`: on success, pushes an extra `-1`; on failure, pushes the original `s` and a zero."
  },
  {
    "name": "PARSEMSGADDR",
    "alias_of": "",
    "tlb": "#FA42",
    "doc_category": "app_addr",
    "doc_opcode": "FA42",
    "doc_fift": "PARSEMSGADDR",
    "doc_stack": "s - t",
    "doc_gas": 26,
    "doc_description": "Decomposes _Slice_ `s` containing a valid `MsgAddress` into a _Tuple_ `t` with separate fields of this `MsgAddress`. If `s` is not a valid `MsgAddress`, a cell deserialization exception is thrown."
  },
  {
    "name": "PARSEMSGADDRQ",
    "alias_of": "",
    "tlb": "#FA43",
    "doc_category": "app_addr",
    "doc_opcode": "FA43",
    "doc_fift": "PARSEMSGADDRQ",
    "doc_stack": "s - t -1 or 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of `PARSEMSGADDR`: returns a zero on error instead of throwing an exception."
  },
  {
    "name": "REWRITESTDADDR",
    "alias_of": "",
    "tlb": "#FA44",
    "doc_category": "app_addr",
    "doc_opcode": "FA44",
    "doc_fift": "REWRITESTDADDR",
    "doc_stack": "s - x y",
    "doc_gas": 26,
    "doc_description": "Parses _Slice_ `s` containing a valid `MsgAddressInt` (usually a `msg_addr_std`), applies rewriting from the `anycast` (if present) to the same-length prefix of the address, and returns both the workchain `x` and the 256-bit address `y` as integers. If the address is not 256-bit, or if `s` is not a valid serialization of `MsgAddressInt`, throws a cell deserialization exception."
  },
  {
    "name": "REWRITESTDADDRQ",
    "alias_of": "",
    "tlb": "#FA45",
    "doc_category": "app_addr",
    "doc_opcode": "FA45",
    "doc_fift": "REWRITESTDADDRQ",
    "doc_stack": "s - x y -1 or 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of primitive `REWRITESTDADDR`."
  },
  {
    "name": "REWRITEVARADDR",
    "alias_of": "",
    "tlb": "#FA46",
    "doc_category": "app_addr",
    "doc_opcode": "FA46",
    "doc_fift": "REWRITEVARADDR",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "A variant of `REWRITESTDADDR` that returns the (rewritten) address as a _Slice_ `s`, even if it is not exactly 256 bit long (represented by a `msg_addr_var`)."
  },
  {
    "name": "REWRITEVARADDRQ",
    "alias_of": "",
    "tlb": "#FA47",
    "doc_category": "app_addr",
    "doc_opcode": "FA47",
    "doc_fift": "REWRITEVARADDRQ",
    "doc_stack": "s - x s' -1 or 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of primitive `REWRITEVARADDR`."
  },
  {
    "name": "SENDRAWMSG",
    "alias_of": "",
    "tlb": "#FB00",
    "doc_category": "app_actions",
    "doc_opcode": "FB00",
    "doc_fift": "SENDRAWMSG",
    "doc_stack": "c x -",
    "doc_gas": 526,
    "doc_description": "Sends a raw message contained in _Cell `c`_, which should contain a correctly serialized object `Message X`, with the only exception that the source address is allowed to have dummy value `addr_none` (to be automatically replaced with the current smart-contract address), and `ihr_fee`, `fwd_fee`, `created_lt` and `created_at` fields can have arbitrary values (to be rewritten with correct values during the action phase of the current transaction). Integer parameter `x` contains the flags. Currently `x=0` is used for ordinary messages; `x=128` is used for messages that are to carry all the remaining balance of the current smart contract (instead of the value originally indicated in the message); `x=64` is used for messages that carry all the remaining value of the inbound message in addition to the value initially indicated in the new message (if bit 0 is not set, the gas fees are deducted from this amount); `x'=x+1` means that the sender wants to pay transfer fees separately; `x'=x+2` means that any errors arising while processing this message during the action phase should be ignored. Finally, `x'=x+32` means that the current account must be destroyed if its resulting balance is zero. This flag is usually employed together with `+128`."
  },
  {
    "name": "RAWRESERVE",
    "alias_of": "",
    "tlb": "#FB02",
    "doc_category": "app_actions",
    "doc_opcode": "FB02",
    "doc_fift": "RAWRESERVE",
    "doc_stack": "x y -",
    "doc_gas": 526,
    "doc_description": "Creates an output action which would reserve exactly `x` nanograms (if `y=0`), at most `x` nanograms (if `y=2`), or all but `x` nanograms (if `y=1` or `y=3`), from the remaining balance of the account. It is roughly equivalent to creating an outbound message carrying `x` nanograms (or `b-x` nanograms, where `b` is the remaining balance) to oneself, so that the subsequent output actions would not be able to spend more money than the remainder. Bit `+2` in `y` means that the external action does not fail if the specified amount cannot be reserved; instead, all remaining balance is reserved. Bit `+8` in `y` means `x:=-x` before performing any further actions. Bit `+4` in `y` means that `x` is increased by the original balance of the current account (before the compute phase), including all extra currencies, before performing any other checks and actions. Currently `x` must be a non-negative integer, and `y` must be in the range `0...15`."
  },
  {
    "name": "RAWRESERVEX",
    "alias_of": "",
    "tlb": "#FB03",
    "doc_category": "app_actions",
    "doc_opcode": "FB03",
    "doc_fift": "RAWRESERVEX",
    "doc_stack": "x D y -",
    "doc_gas": 526,
    "doc_description": "Similar to `RAWRESERVE`, but also accepts a dictionary `D` (represented by a _Cell_ or _Null_) with extra currencies. In this way currencies other than Grams can be reserved."
  },
  {
    "name": "SETCODE",
    "alias_of": "",
    "tlb": "#FB04",
    "doc_category": "app_actions",
    "doc_opcode": "FB04",
    "doc_fift": "SETCODE",
    "doc_stack": "c -",
    "doc_gas": 526,
    "doc_description": "Creates an output action that would change this smart contract code to that given by _Cell_ `c`. Notice that this change will take effect only after the successful termination of the current run of the smart contract."
  },
  {
    "name": "SETLIBCODE",
    "alias_of": "",
    "tlb": "#FB06",
    "doc_category": "app_actions",
    "doc_opcode": "FB06",
    "doc_fift": "SETLIBCODE",
    "doc_stack": "c x -",
    "doc_gas": 526,
    "doc_description": "Creates an output action that would modify the collection of this smart contract libraries by adding or removing library with code given in _Cell_ `c`. If `x=0`, the library is actually removed if it was previously present in the collection (if not, this action does nothing). If `x=1`, the library is added as a private library, and if `x=2`, the library is added as a public library (and becomes available to all smart contracts if the current smart contract resides in the masterchain); if the library was present in the collection before, its public/private status is changed according to `x`. Also, `16` can be added to `x` to enable bounce transaction on failure. Values of `x` other than `0...2 (+16 possible)` are invalid."
  },
  {
    "name": "CHANGELIB",
    "alias_of": "",
    "tlb": "#FB07",
    "doc_category": "app_actions",
    "doc_opcode": "FB07",
    "doc_fift": "CHANGELIB",
    "doc_stack": "h x -",
    "doc_gas": 526,
    "doc_description": "Creates an output action similarly to `SETLIBCODE`, but instead of the library code accepts its hash as an unsigned 256-bit integer `h`. If `x!=0` and the library with hash `h` is absent from the library collection of this smart contract, this output action will fail."
  }
]
